# ORDER-SERVICE
server:
  port: 8082
spring:
  application:
    name: order-service
  datasource:
    url: jdbc:postgresql://localhost:5432/order-service
    driverClassName: org.postgresql.Driver
    username: 'bgnat'
    password: 'password'
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
  # Kafka properties
  kafka:
    bootstrap-servers: localhost:9092
    template:
      defaultTopic: notificationTopic
    producer:
      groupId: notificationId
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: event:pl.bgnat.order.event.OrderPlacedEvent

# Properties - Values
microservice:
  inventory:
    url:
      get: http://inventory-service/api/v1/inventory

# Eureka Discovery client properties
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:password@localhost:8761/eureka

management:
  # management Zipkin and Resilience4j
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
      sampling:
        probability: 1.0
  health:
    circuitbreakers:
      enabled: true
    retries:
      enabled: true
  endpoint:
    web:
      exposure:
        include: "*"
    health:
      show-details: always

# Resilience4j Properties
resilience4j:
  # Circuitbreaker Properties
  circuitbreaker:
    instances:
      inventory:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
  # Retry Properties
  retry:
    instances:
      inventory:
        registerHealthIndicator: true
        maxRetryAttempts: 3
        waitDuration: 5s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  # Timeout Properties
  timelimiter:
    instances:
      inventory:
        registerHealthIndicator: true
        timeoutDuration: 3s


logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"