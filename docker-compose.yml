version: "3.8"
services:
  # Postgres Docker Compose Config
  # ORDER-SERVICE 5432
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: bgnat
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    ports:
      - "5432:5432"
    restart: always
  # POSTGRES-INVENTORY 5433
  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: bgnat
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5433:5433"
    expose:
      - "5433"
    command: -p 5433
    restart: always
  # POSTGRES-CUSTOMER 5434
  postgres-customer:
    container_name: postgres-customer
    image: postgres
    environment:
      POSTGRES_DB: customer-service
      POSTGRES_USER: bgnat
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./postgres-customer:/data/postgres
    ports:
      - "5434:5434"
    expose:
      - "5434"
    command: -p 5434
    restart: always
  # POSTGRES-FRAUD 5435
  postgres-fraud:
    container_name: postgres-fraud
    image: postgres
    environment:
      POSTGRES_DB: fraud-service
      POSTGRES_USER: bgnat
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./postgres-fraud:/data/postgres
    ports:
      - "5435:5435"
    expose:
      - "5435"
    command: -p 5435
    restart: always
  ## Mongo Docker Compose Config 27017
  mongo-product:
    container_name: mongo-product
    image: mongo:6.0.7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=bgnat
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=product
    volumes:
      - ./mongo-data:/data/db
    ports:
      - "27017:27017"
    expose:
      - "27017"
    restart: always

  # Keycloak Config with MySQL 8080
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:22.0.0
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  # Zookeeper and Kafka localhost:9092 / broker:29092
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # Zipkin 9411
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server 8761 with gateway on 8181
  discovery-server:
    image: bgnatowski/discovery-server:latest
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  ##
  api-gateway:
    image: bgnatowski/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

## Product-Service Docker compose
  product-service:
    container_name: product-service
    image: bgnatowski/product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo-product
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: bgnatowski/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order-service
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway
  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: bgnatowski/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5433/inventory-service
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway

  ## Customer-Service Docker Compose Config
  customer-service:
    container_name: customer-service
    image: bgnatowski/customer-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-customer:5434/customer-service
    depends_on:
      - postgres-customer
      - discovery-server
      - api-gateway
  ## Fraud-Service Docker Compose Config
  fraud-service:
    container_name: fraud-service
    image: bgnatowski/fraud-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-fraud:5435/fraud-service
    depends_on:
      - postgres-fraud
      - discovery-server
      - api-gateway
  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: bgnatowski/notification-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
